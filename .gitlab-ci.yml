include:
  - project: "docker/process-webhooks"
    file: "/gitlab/deploy.yml"

variables:
  PROJECT_TO_BE_DEPLOYED: "docker/pccd"

stages:
  - build
  - deploy
  - update

build:
  image: docker:latest@sha256:de91b21638c6898b6ff2b52ce5f31031c08234dc6f718b8e16cdc045bfdc0d7f
  services:
    - docker:dind@sha256:de91b21638c6898b6ff2b52ce5f31031c08234dc6f718b8e16cdc045bfdc0d7f
  before_script:
    - export DATETAG=$(date +%Y%m%d-%H%M%S)
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
    - DOCKER_IMAGE=${CI_REGISTRY_IMAGE}/pccd-web
    - docker build -f .docker/web-alpine.prod.Dockerfile --cache-from $DOCKER_IMAGE:latest --tag $DOCKER_IMAGE:$CI_COMMIT_SHA --tag $DOCKER_IMAGE:$DATETAG --tag $DOCKER_IMAGE:latest --build-arg ARG_MYSQL_DB=$MYSQL_DB --build-arg ARG_MYSQL_USER=$MYSQL_USER --build-arg ARG_MYSQL_PWD=$MYSQL_PWD --build-arg ARG_WEB_ADMIN_PWD=$WEB_ADMIN_PWD .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE:$DATETAG
    - docker push $DOCKER_IMAGE:latest
    - DOCKER_IMAGE=${CI_REGISTRY_IMAGE}/pccd-sql
    - docker build -f .docker/sql.prod.Dockerfile --cache-from $DOCKER_IMAGE:latest --tag $DOCKER_IMAGE:$CI_COMMIT_SHA --tag $DOCKER_IMAGE:$DATETAG --tag $DOCKER_IMAGE:latest --build-arg ARG_MYSQL_ROOT_PWD=$MYSQL_ROOT_PWD --build-arg ARG_MYSQL_DB=$MYSQL_DB --build-arg ARG_MYSQL_USER=$MYSQL_USER --build-arg ARG_MYSQL_PWD=$MYSQL_PWD .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
    - docker push $DOCKER_IMAGE:$DATETAG
    - docker push $DOCKER_IMAGE:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

.setup:
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - export PHP_CS_FIXER_IGNORE_ENV=1
    - apt-get update && apt-get upgrade -y && xargs apt-get install --no-install-recommends -y < apt_packages.txt
    - npm ci --ignore-scripts
    - ./composer.phar install

.php_lint_template:
  stage: build
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y git unzip wget
    - curl -L https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions > /usr/local/bin/install-php-extensions
    - chmod +x /usr/local/bin/install-php-extensions
    - install-php-extensions gd intl pdo_mysql
    - php ./composer.phar install
    - php ./composer.phar run php-l
    - php ./composer.phar run composer-normalize-lint
    - php ./composer.phar run phpcs
    - PHP_CS_FIXER_IGNORE_ENV=1 php ./composer.phar run php-cs-fixer-lint
    - php ./composer.phar run phpstan
    - php ./composer.phar run rector-lint
    - php ./composer.phar run psalm
    - php ./composer.phar run phpunit
  allow_failure: true

php_lint:
  extends: .php_lint_template
  parallel:
    matrix:
      - PHP_VERSION: "8.3"
      - PHP_VERSION: "8.4"
  image: php:${PHP_VERSION}
  before_script:
    - echo "Running in PHP version ${PHP_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

.npm_lint_template:
  stage: build
  script:
    - npm ci --ignore-scripts
    - npm run lint:eslint
    - npm run lint:ls
    - npm run lint:markdown
    - npm run lint:stylelint
    - npm run lint:prettier
  allow_failure: true

npm_lint:
  extends: .npm_lint_template
  parallel:
    matrix:
      - NODE_VERSION: 20
      - NODE_VERSION: 22
  image: node:${NODE_VERSION}
  before_script:
    - echo "Running in Node.js version ${NODE_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

.check_code_template:
  extends: .setup
  stage: build
  script:
    - npm run check:code
  allow_failure: true

check_code_ubuntu:
  extends: .check_code_template
  image: ubuntu:rolling@sha256:102bc1874fdb136fc2d218473f03cf84135cb7496fefdb9c026c0f553cfe1b6d
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

check_code_debian:
  extends: .check_code_template
  image: debian:testing@sha256:091c08172e89a13193e236bc458278d0e731b8f94c9cbb23997f6ca8532cff45
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

nightly_update:
  extends: .setup
  image: debian:testing@sha256:091c08172e89a13193e236bc458278d0e731b8f94c9cbb23997f6ca8532cff45
  stage: update
  script:
    - npm run update
    - |
      if [ -n "$(git status --porcelain)" ]; then
        git config --global user.email "ci@softcatala.org"
        git config --global user.name "PCCD Bot"
        git remote set-url origin https://oauth2:$GITLAB_TOKEN@gitlab.softcatala.org/pere/pccd.git
        git branch -D nightly-update || true
        git checkout -b nightly-update
        git add .
        HUSKY=0 git commit -m "chore(deps): update dependencies"
        git push origin nightly-update --force
        MR_EXISTS=$(curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.softcatala.org/api/v4/projects/14/merge_requests?state=opened&source_branch=nightly-update")
        if [ "$MR_EXISTS" == "[]" ]; then
          curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            --data "title=chore(deps): update dependencies&source_branch=nightly-update&target_branch=master" \
            "https://gitlab.softcatala.org/api/v4/projects/14/merge_requests"
        else
          echo "Merge request already exists"
        fi
      else
        echo "No changes to commit"
        exit 0
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - when: manual
  needs: []

deploy:
  stage: deploy
  when: manual
  extends:
    - .default-deploy

reset:
  stage: deploy
  when: manual
  extends:
    - .reset
