import globals from "globals";
import js from "@eslint/js";
import regexp from "eslint-plugin-regexp";
import unicorn from "eslint-plugin-unicorn";

// Default config assumes browser scripts using classic <script> tags.
// Node.js scripts are explicitly handled with overrides.
export default [
    js.configs.recommended,
    regexp.configs["flat/recommended"],
    unicorn.configs.recommended,
    {
        languageOptions: {
            sourceType: "script",
            globals: { ...globals.browser },
        },
        rules: {
            "camelcase": "error",
            "consistent-this": "error",
            "dot-notation": "error",
            "eqeqeq": "error",
            "func-style": "error",
            "guard-for-in": "error",
            "init-declarations": "error",
            "max-nested-callbacks": "error",
            "max-params": "error",
            "new-cap": "error",
            "no-alert": "error",
            "no-array-constructor": "error",
            "no-bitwise": "error",
            "no-caller": "error",
            "no-div-regex": "error",
            "no-else-return": "error",
            "no-eq-null": "error",
            "no-eval": "error",
            "no-extend-native": "error",
            "no-extra-bind": "error",
            "no-implicit-coercion": "error",
            "no-implied-eval": "error",
            "no-inline-comments": "error",
            "no-iterator": "error",
            "no-label-var": "error",
            "no-labels": "error",
            "no-lone-blocks": "error",
            "no-lonely-if": "error",
            "no-loop-func": "error",
            "no-multi-str": "error",
            "no-negated-condition": "error",
            "no-nested-ternary": "error",
            "no-new": "error",
            "no-new-func": "error",
            "no-new-object": "error",
            "no-new-wrappers": "error",
            "no-octal-escape": "error",
            "no-param-reassign": "error",
            "no-proto": "error",
            "no-restricted-syntax": [
                "error",
                "FunctionDeclaration",
                "WithStatement",
                "BinaryExpression[operator='in']",
            ],
            "no-return-assign": "error",
            "no-script-url": "error",
            "no-self-compare": "error",
            "no-shadow": "error",
            "no-throw-literal": "error",
            "no-underscore-dangle": "error",
            "no-unneeded-ternary": "error",
            "no-unused-expressions": "error",
            "no-use-before-define": "error",
            "no-useless-assignment": "error",
            "no-useless-call": "error",
            "no-useless-concat": "error",
            "no-var": "error",
            "no-void": "error",
            "object-shorthand": "error",
            "one-var": ["error", "never"],
            "operator-assignment": "error",
            "prefer-arrow-callback": ["error", { allowUnboundThis: false }],
            "prefer-const": "error",
            "prefer-spread": "error",
            "radix": "error",
            "sort-vars": "error",
            "spaced-comment": "error",
            "unicorn/numeric-separators-style": "off",
            "unicorn/prefer-module": "off",
            "unicorn/prefer-top-level-await": "off",
            "yoda": "error",
        },
    },
    {
        files: ["tests/**", "scripts/**"],
        languageOptions: {
            sourceType: "commonjs",
            globals: { ...globals.node },
        },
    },
];
